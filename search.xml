<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>我的过去与未来</title>
      <link href="2022/04/05/wo-de-guo-qu-yu-wei-lai/"/>
      <url>2022/04/05/wo-de-guo-qu-yu-wei-lai/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考 </tag>
            
            <tag> 计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="2021/03/15/springboot/"/>
      <url>2021/03/15/springboot/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h2><p>继承了 Spring 框架原有的优秀特性，同时通过简化配置进一步简化了 Spring 应用的搭建和开发过程。</p><p>可以基于 Maven 的创建独立的 Spring 应用程序，可以通过在 Maven 的 pom.xml 文件中添加相关依赖，来配置和管理相关依赖</p><p>SpringBoot 还内嵌了 Tomcat 容器，进一步减少了需要安装和配置 Tomcat 的过程</p><p>SpringBoot 在项目启动时，根据约定信息对组件进行加载、初始化，实现了开箱即用，提现了 SpringBoot 的设计理念，即约定大于配置</p><p>在实际开发中，SpingBoot 使用了经典的三层结构的软件架构，Cotroller 控制层，Service 业务层，Dao 数据访问层。Cotroller 层在接受前端发送的 URL 后，处理参数并返回结果，Service 层编写业务逻辑，处理数据，Dao 层访问数据库，进行增删改查</p><p>常用注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span> <span class="token comment">// 等价于 @ResponseBody ＋ @Controller 写在Controller类前替代@Controller</span><span class="token comment">// 处理各自的传入请求方法类型</span><span class="token annotation punctuation">@GetMapping</span><span class="token annotation punctuation">@PostMapping</span><span class="token annotation punctuation">@PutMapping</span><span class="token annotation punctuation">@DeleteMapping</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC</title>
      <link href="2021/03/14/springmvc/"/>
      <url>2021/03/14/springmvc/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><p>SpringMVC 架构</p><p><img src="https://i.loli.net/2021/03/14/szDjE4uThPURAak.jpg" alt="SpringMVC"></p><p>在 Controller 包下创建类，在类中定义方法，以注解的方式与 url 建立映射</p><p>常用注解：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@controller</span> <span class="token comment">// Controller类 单例</span><span class="token annotation punctuation">@RequestMapping</span> <span class="token comment">// 与url建立映射关系</span><span class="token annotation punctuation">@ResPonseBody</span> <span class="token comment">// 自动将对象转化为JSON字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Restful 风格：比较流行的软件架构风格、设计风格，提供了一组设计原则和约束条件</p><p>首先，Restful 是面向资源的，URL 的设计只需要暴露资源，对资源的操作与它无关，操作则是通过 HTTP 动词来体现，URL 中只会出现资源对应的名词，例如<strong><a href="http://learn/api/v1/course">http://learn/api/v1/course</a></strong></p><p>其次，Restful 是基于 HTTP 的，使用了 HTTP 动词来体现资源的操作，其中，GET 是从服务器取出资源，POST 是在服务器创建一个资源吗，PUT 是为服务器更新资源，DELETE 是为服务器删除资源</p><p>最后，在实际开发中，我们还规定了固定的返回值统一格式，规定统一的全局状态码，要在正确的场景中返回详细的错误状态</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"code"</span><span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">,</span>    <span class="token property">"message"</span><span class="token operator">:</span><span class="token string">"成功"</span>    <span class="token property">"data"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"userName"</span><span class="token operator">:</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token property">"age"</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">SUCCESS</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"成功"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">FAIL</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">USER_NOT_FOUND</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1002</span><span class="token punctuation">,</span> <span class="token string">"用户不存在"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">USER_PASS_EDIT_FAIL</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1008</span><span class="token punctuation">,</span> <span class="token string">"密码不正确"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">NO_RESOURCES</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4001</span><span class="token punctuation">,</span> <span class="token string">"资源不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用注解：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PathVariable</span>  <span class="token comment">// 用于将请求URL的模板变量映射到功能处理方法的参数上</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>SpringMVC 的底层原理：url —– 类/方法建立映射关系，然后通过 DispatchServlet（控制器）、HandlerMapping（键值对存储 url 映射）进行分发，执行完具体方法后，再返回给 DispatchServlet</p><p>映射有两种：</p><p>url ——–&gt; 类的全限定名<br>url ——–&gt; 类的全限定名、方法（方法名、返回类型、形参名、形参类型的全限定名）</p><p><strong>造轮子自己实现一个 SpingMVC</strong>：</p><p>两种映射关系</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>method</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>json/jsp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>java.lang.String<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>java.lang.Integer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>method</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 SAX 解析器解析存储映射关系的 XML 文件，将映射关系存储到 HandleMapping 的两个 Map 中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 利用HashMap键值对的方式存储url映射</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HandleMapping</span> <span class="token punctuation">{</span><span class="token comment">//第一种映射</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> beanNameMapping <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第二种映射</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">MethodInfo</span><span class="token punctuation">&gt;</span></span> annotaionMethodMapping <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">MethodInfo</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//通过一个po类MethodInfo对第二种映射中的方法进行封装</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodInfo</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> className<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> methodName<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> action<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> paramNames<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> paramTypes<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建控制器 ControllerServlet，来分发请求并执行具体方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 定义接口MyController</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyController</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ControllerServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ControllerServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> url <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        url <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token string">"/MySpringMVCWork"</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> url<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建HandleMapping这个类通过hashmap对两种映射关系进行封装</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">HandleMapping</span><span class="token punctuation">.</span>beanNameMapping<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token comment">// 不同的映射处理方式不同</span>        <span class="token punctuation">{</span>            <span class="token class-name">String</span> className <span class="token operator">=</span> <span class="token class-name">HandleMapping</span><span class="token punctuation">.</span>beanNameMapping<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Class</span> clz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 类的全限定名得到字节码对象</span>                <span class="token class-name">Object</span> object <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 字节码对象得到具体的对象</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">MyController</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 判断处理类有没有实现定义的接口</span>                    <span class="token comment">// 如果没有，则抛出自定义异常</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MyMvcException</span><span class="token punctuation">(</span><span class="token string">"处理类没有实现MyController接口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">MyController</span> controller <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MyController</span><span class="token punctuation">)</span> object<span class="token punctuation">;</span><span class="token comment">// 接口回调</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 判断请求方式</span>                <span class="token punctuation">{</span>                    controller<span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    controller<span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">MethodInfo</span> methodinfo <span class="token operator">=</span> <span class="token class-name">HandleMapping</span><span class="token punctuation">.</span>annotaionMethodMapping<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>methodinfo <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// url未找到映射，404</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment">// 对MethodInfo进行拆解</span>                <span class="token comment">// 类的全限定名得到字节码对象</span>                <span class="token class-name">Class</span> clz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>methodinfo<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 字节码对象得到具体的对象</span>                <span class="token class-name">Object</span> object <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 形参类型的全限定名List</span>                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> paramTypeslist <span class="token operator">=</span> methodinfo<span class="token punctuation">.</span><span class="token function">getParamTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 形参名List</span>                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> paramNameslist <span class="token operator">=</span> methodinfo<span class="token punctuation">.</span><span class="token function">getParamNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> paramTypes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span>methodinfo<span class="token punctuation">.</span><span class="token function">getParamTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> paramNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>methodinfo<span class="token punctuation">.</span><span class="token function">getParamNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> paramNames<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// 形参类型的全限定名数组</span>                    paramTypes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>paramTypeslist<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 形参名数组</span>                    paramNames<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> paramNameslist<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">// 通过反射机制可以得到方法</span>                <span class="token class-name">Method</span> method <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span>methodinfo<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> paramTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 创建一个辅助类RequestDataHandler以形参的类型对实参的值进行转化</span>                <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> <span class="token class-name">RequestDataHandler</span><span class="token punctuation">.</span><span class="token function">handlerRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> paramTypes<span class="token punctuation">,</span> paramNames<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Object</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token comment">// 执行具体的方法</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>methodinfo<span class="token punctuation">.</span><span class="token function">getParamNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 得到待处理的结果</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>methodinfo<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"json"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 通过返回类型来处理结果</span>                <span class="token punctuation">{</span>                    <span class="token class-name">PrintWriter</span> out <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">JSONObject</span> json <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        json <span class="token operator">=</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">fromObject</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>json <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                        out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token class-name">JSONArray</span> json2 <span class="token operator">=</span> <span class="token class-name">JSONArray</span><span class="token punctuation">.</span><span class="token function">fromObject</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                        out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>json2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="2021/03/14/spring/"/>
      <url>2021/03/14/spring/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><p>SpringCore：核心容器（工厂模式）</p><p>特性：<br><code>DI(依赖注入)</code>：给属性赋值<br><code>IOC(控制反转)</code>：对象会自动注入，不用自己创建对象</p><p>常用注解：</p><p>在需要创建的对象前加上</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>  <span class="token comment">// Spring的注解</span><span class="token annotation punctuation">@Resource</span>  <span class="token comment">// J2EE中的注解</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后再对应的类前加上</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span>    <span class="token comment">// 业务层</span><span class="token annotation punctuation">@Component</span>  <span class="token comment">// 泛指</span><span class="token annotation punctuation">@Repository</span> <span class="token comment">// 持久层</span><span class="token annotation punctuation">@Controller</span> <span class="token comment">// Web处理层</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>AOP：面向切面变成的思想 - - - - - 为分散的对象引入公共行为，分离应用的业务逻辑和系统级服务，常用于日志和事务管理</p><p>需求：多个业务需要同一份代码，AOP 维护同一份代码，动态加入需要的内容</p><p>实现方式：（代理模式）</p><ul><li><p>JDK 动态代理：实现被代理类实现的接口，并重写接口中声明的方法</p></li><li><p>字节码增强：若被代理类没有实现接口，则继承被代理的类，并重写方法</p></li></ul><p>通知：在切面的某个特定的连接点上执行的操作，即切入的内容</p><ul><li><p>前置通知 before 在目标方法执行之前执行执行的通知</p></li><li><p>后置通知 after-renturn 在目标方法执行之后执行的通知</p></li><li><p>环绕通知 around 在目标方法执行之前和之后都可以执行额外代码的通知</p></li><li><p>抛出通知 after-throwing 在目标方法抛出异常时执行的通知</p></li><li><p>最终通知 after 是在目标方法执行之后执行的通知</p></li></ul><p>常用注解：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span> <span class="token comment">// 切面类</span><span class="token annotation punctuation">@Pointcut</span> <span class="token comment">// 配置切入点</span><span class="token annotation punctuation">@Before</span> <span class="token comment">// 前置通知</span><span class="token annotation punctuation">@AfterReturning</span> <span class="token comment">// 后置通知</span><span class="token annotation punctuation">@Around</span> <span class="token comment">// 环绕通知</span><span class="token annotation punctuation">@AfterThrowing</span> <span class="token comment">// 抛出通知</span><span class="token annotation punctuation">@After</span> <span class="token comment">// 最终通知</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis</title>
      <link href="2021/03/14/mybatis/"/>
      <url>2021/03/14/mybatis/</url>
      
        <content type="html"><![CDATA[<h2 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h2><p>JDBC 提供了 DataSource 接口、负责与数据库连接</p><p>实现了 DataSource 接口的类称为数据源，C3P0</p><p><strong>#{ }和${ }</strong><br>#{ }代表占位符，采用预编译方式传参，可以防止 SQL 注入攻击，对于字符串类型，自动添加引号<br>${ }直接拼接字符串，不能防止 SQL 注入攻击，对于字符串类型，不会自动添加引号，<strong>所以</strong>常用于模糊查询和排序</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token string">'%${name}%'</span><span class="token keyword">order</span> <span class="token keyword">by</span> ${name}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM内存机制和垃圾回收机制</title>
      <link href="2021/03/14/jvm-nei-cun-ji-zhi-he-la-ji-hui-shou-ji-zhi/"/>
      <url>2021/03/14/jvm-nei-cun-ji-zhi-he-la-ji-hui-shou-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h4 id="JVM-的内存逻辑结构"><a href="#JVM-的内存逻辑结构" class="headerlink" title="JVM 的内存逻辑结构"></a>JVM 的内存逻辑结构</h4><p>JVM 内存区域：</p><p><code>堆</code>：new 出来的对象</p><p><code>方法区</code>：已被 JVM 加载的类信息，常量，静态变量</p><p><code>Java栈</code>：每个方法在执行的同时都会创建一个栈帧，以栈帧的方式存储局部变量表、操作数栈、动态链接、方法出口等信息</p><p><code>本地方法栈</code>：保存 native 方法的信息（native 方法用于调用第三方语言）</p><p><code>程序计数器</code>：当前线程的字节码的行号指示器</p><p>本地内存：内含直接内存</p><p>Java1.8 中取消方法区，在本地内存中创建了一块空间，元空间，用于存储已被 JVM 加载的类信息，常量，静态变量</p><p>线程独享：Java 栈、本地方法栈、程序计数器</p><p>线程共享：堆、方法区</p><h4 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h4><p>主要回收堆内存</p><p><img src="https://i.loli.net/2021/03/14/zELTInNUQJ4msVH.png" alt="堆"></p><ul><li><p>对象分配：</p><p>优先在 eden 区分配，当 eden 区没有足够空间分配时，发起一次 MinorGC，将 eden 区和其中一块 survivor 区尚存活的对象放入另一块 survivor 区域，若 MinorGC 时，survivork 空间不够，则从前一个 survivor 区复制过来且还存活的对象进入年老代，两块 survivor 区永远由一个是空的，另一个非空且无碎片保存的</p></li><li><p>对象晋级：</p><p>为每个对象定义了一个对象年龄计数器，经过第一次 MinorGC 后仍然存活，被移动到 survivor 空间中，并将年龄设为 1，若对象在 survivor 区中每熬过一次 MinorGC，年龄就加 1，增加到一定程度，就会进入年老代</p></li><li><p>MinorGC：</p><p>当新对象生成，且在 eden 区申请空间失败时，就会触发 MinorGC，消除 eden 区和其中一块 survivor 区的非存活对象，并将所有尚且存活的对象移入另一块 survivor 区，较为频繁，速度较快</p></li><li><p>FullGC：</p><p>对整个堆进行整理，包括年轻代和年老代，当年老代被写满，System.GC()被调用时，触发 FullGC，较慢</p></li><li><p>对象生死判定：可达性分析算法，当一个对象到 GCRoots 没有引用链相连时，即不可用</p></li><li><p>垃圾回收算法：标记清除法，复制算法，标记整理法</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理模式</title>
      <link href="2021/03/14/dai-li-mo-shi/"/>
      <url>2021/03/14/dai-li-mo-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>通过引入<strong>代理对象</strong>的方式来间接访问<strong>目标对象</strong></p><p>优点：可以在不修改被代理对象的基础上，通过扩展代理类，进行功能的附加和增强</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ISource</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 被代理的类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Source</span> inplements <span class="token class-name">ISource</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 代理类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">ISource</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Source</span> source<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// before</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// after</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="2021/03/14/dan-li-mo-shi/"/>
      <url>2021/03/14/dan-li-mo-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p><strong>保证一个类在内存中仅有一个实例</strong></p><p>优点：</p><ul><li>在内存中只有一个实例，可以减少内存开支，节约系统资源</li><li>避免对共享资源的多重占用</li></ul><p>缺点：</p><ul><li>在多线程下要考虑线程安全问题</li></ul><p><strong>实现方式：</strong></p><p>饿汉式：类初始化时，会立即加载该对象，线程天生安全，调用效率高</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Demo</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Demo</span> <span class="token function">getDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> demo<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>懒汉式：当需要时，才会去创建对象，在多线程环境下保证线程安全需要加锁，效率较低</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Demo</span> demo<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">Demo</span> <span class="token function">getDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>demo <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> demo<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>双重检测锁：在多线程环境下，保证线程安全且不影响程序的性能</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Demo</span> demo<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Demo</span> <span class="token function">getDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>demo <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">Demo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>demo <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> demo<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂模式</title>
      <link href="2021/03/14/gong-han-mo-shi/"/>
      <url>2021/03/14/gong-han-mo-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>好处：</p><ul><li><p>解耦</p></li><li><p>降低代码重复</p></li><li><p>使用者不需要知道具体的创建过程，减少因为创建逻辑导致的错误</p></li><li><p>容易扩展，易于维护</p></li></ul><p><code>解耦</code>：降低各个模块之间的耦合和依赖关系，可以降低维护成本</p><p>简单工厂：建立一个工厂类，对实现了同一接口的一些类进行实例的创建</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 抽象产品：手机</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 具体产品：小米手机</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MiPhone</span> <span class="token keyword">implements</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">MiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"make xiaomi phone!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 具体产品：苹果手机</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IPhone</span> <span class="token keyword">implements</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">IPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"make iphone!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 工厂类: 生产不同品牌的手机</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhoneFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Phone</span> <span class="token function">makePhone</span><span class="token punctuation">(</span><span class="token class-name">String</span> phoneType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>phoneType<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"MiPhone"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>phoneType<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"iPhone"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">IPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">PhoneFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhoneFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Phone</span> miPhone <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">makePhone</span><span class="token punctuation">(</span><span class="token string">"MiPhone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// make xiaomi phone!</span>        <span class="token class-name">IPhone</span> iPhone <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IPhone</span><span class="token punctuation">)</span>factory<span class="token punctuation">.</span><span class="token function">makePhone</span><span class="token punctuation">(</span><span class="token string">"iPhone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// make iphone!</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法工厂：创建一个工厂接口和多个工厂实现类，一个工厂实现类负责对一个类进行实例的创建</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 抽象工厂：生产手机的工厂</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AbstractFactory</span> <span class="token punctuation">{</span>    <span class="token class-name">Phone</span> <span class="token function">makePhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 具体工厂：生产小米手机的工厂类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiaoMiFactory</span> <span class="token keyword">implements</span> <span class="token class-name">AbstractFactory</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Phone</span> <span class="token function">makePhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 具体工厂：生产苹果手机的工厂类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppleFactory</span> <span class="token keyword">implements</span> <span class="token class-name">AbstractFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Phone</span> <span class="token function">makePhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">IPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">AbstractFactory</span> miFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XiaoMiFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AbstractFactory</span> appleFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AppleFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        miFactory<span class="token punctuation">.</span><span class="token function">makePhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// make xiaomi phone!</span>        appleFactory<span class="token punctuation">.</span><span class="token function">makePhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// make iphone!</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>抽象工厂：</p><p>多个抽象产品类，每个抽象产品类可以派生出多个具体产品类</p><p>一个抽象工厂类，可以派生出多个具体工厂类</p><p>每个具体工厂类可以继承多个工厂接口，实现创建多个具体产品类的实例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 抽象产品：电脑</span><span class="token keyword">public</span> <span class="token keyword">interface</span> PC <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 具体产品：小米电脑</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MiPC</span> <span class="token keyword">implements</span> PC <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">MiPC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"make xiaomi PC!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 具体产品:苹果电脑</span><span class="token keyword">public</span> <span class="token keyword">class</span> MAC <span class="token keyword">implements</span> PC <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MAC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"make MAC!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 抽象工厂：生产手机和电脑的工厂</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AbstractFactory</span> <span class="token punctuation">{</span>    <span class="token class-name">Phone</span> <span class="token function">makePhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">PC</span> <span class="token function">makePC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 增加生产电脑的方法</span><span class="token punctuation">}</span><span class="token comment">// 具体工厂：生产小米手机和小米电脑的工厂类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiaoMiFactory</span> <span class="token keyword">implements</span> <span class="token class-name">AbstractFactory</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Phone</span> <span class="token function">makePhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">PC</span> <span class="token function">makePC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MiPC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 具体工厂：生产苹果手机和苹果电脑的工厂类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppleFactory</span> <span class="token keyword">implements</span> <span class="token class-name">AbstractFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Phone</span> <span class="token function">makePhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">IPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">PC</span> <span class="token function">makePC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">MAC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">AbstractFactory</span> miFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XiaoMiFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AbstractFactory</span> appleFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AppleFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        miFactory<span class="token punctuation">.</span><span class="token function">makePhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// make xiaomi phone!</span>        miFactory<span class="token punctuation">.</span><span class="token function">makePC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// make xiaomi PC!</span>        appleFactory<span class="token punctuation">.</span><span class="token function">makePhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// make iphone!</span>        appleFactory<span class="token punctuation">.</span><span class="token function">makePC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// make MAC!</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="2021/03/14/ji-suan-ji-wang-luo/"/>
      <url>2021/03/14/ji-suan-ji-wang-luo/</url>
      
        <content type="html"><![CDATA[<h3 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h3><p><strong>体系结构</strong></p><p>应用层：DNS、HTTP、SMTP、FTP<br>传输层：TCP、UDP<br>网络层：IP<br>数据链路层<br>物理层</p><p><strong>TCP 和 UDP 的区别</strong></p><p><code>TCP</code>协议面向连接，可靠传输，面向字节流，效率低，实现了流量控制、拥塞控制<br><code>UDP</code>协议无连接，不可靠传输，可能出现丢包现象，以数据报作为基本单位收发，效率高</p><p><strong>TCP 报文段：首部+数据</strong></p><p>首部 20 个字节，包括序号 seq，确认号 ack，ACK，SYN，FIN 等字段，源端口号，目的端口号等序号 seq 表示所要发生的数据的第一个数据字节的序号</p><p>确认号 ack 表示对已收到的数据的最高序号加 1，即期望下次收到的数据中第一个数据字节的序号</p><p>ACK=1 时，ack 才有效</p><p>SYN=1 时，表示这是一个连接请求或连接接受的报文</p><p>FIN=1 时，表示此报文段的发送端已发送完毕，并要求释放连接</p><p><strong>TCP 如何做到可靠传输？如果发送数据，没有接受到 ACK 确认会怎样？</strong></p><ul><li><p>确认应答+序列号：TCP 传输过程中，每次接收方收到报文后，都会对发送方进行确认应答，也就是发送 ACK 报文，这个 ACK 报文会带有确认号 ack，告诉发送方，接收到了哪些数据，下一次的数据从哪里开始继续发。其次，接收方可以根据报文首部的序号对数据包进行排序和去重，然后把数据传送给应用层。</p></li><li><p>超时重传：发送方发出数据后，会开启一个计时器，当一定时间后还未收到 ACK 确认报文，则重发数据，直到达到重发次数或收到 ACK，累计到一定的重传次数，TCP 会认为网络异常，强制关闭连接。</p></li><li><p>快速重传：当接受方收到的数据包序号不正确，那么接受方会重复发送上一条 ACK 确认报文，若发送方连续收到了 3 条同一个确认号的 ACK，就会启动快速重传，把这个 ACK 对应的发送包重新发送。</p></li><li><p>滑动窗口：滑动窗口的发送窗口，未收到 ACK 确认就不滑动<br><code>发送窗口</code>：已发送，未收到 ACK、未发送，但允许发送<br><code>接受窗口</code>：未接收但准备接收</p></li></ul><p><strong>TCP 如何做到数据不重复？</strong></p><p>接收方可以根据报文首部的序号对数据包进行排序和去重，然后把数据传送给应用层。</p><p><strong>三次握手，建立连接</strong></p><p><img src="https://i.loli.net/2021/03/14/sqhkOBnNRfvzWaU.png" alt="三次握手"><strong>四次挥手，释放连接</strong></p><p><img src="https://i.loli.net/2021/03/14/mjuFKYNizyHp1VS.png" alt="四次挥手"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程</title>
      <link href="2021/03/14/xian-cheng/"/>
      <url>2021/03/14/xian-cheng/</url>
      
        <content type="html"><![CDATA[<h4 id="线程的创建"><a href="#线程的创建" class="headerlink" title="线程的创建"></a>线程的创建</h4><p>继承<code>Thread</code>类，并重写 run 方法<br>实现<code>Runnable</code>接口，并重写 run 方法，和 Thread 相比，可以实现资源共享，即多个线程处理同一个资源<br>实现<code>Callable</code>接口，并重写 call 方法，和 run 方法相比，call 方法有返回值</p><h4 id="多线程会遇到什么问题？"><a href="#多线程会遇到什么问题？" class="headerlink" title="多线程会遇到什么问题？"></a>多线程会遇到什么问题？</h4><p>线程安全问题：多个线程同时操作一个共享变量时，导致数据不一致</p><p>解决方法：</p><ul><li><p>尽量减少共享资源</p></li><li><p>加锁使线程同步，使某一时刻只允许一个线程在程序中允许</p><p>synchronized 锁：非公平锁、可重入锁<br>Lock 锁：默认为非公平锁（可设置为公平锁）、可重入锁</p><p>对比：</p><ul><li><p>发生异常时，synchronized 会自动释放锁，不易导致死锁，Lock 需要用 unLock()主动释放锁，否则会死锁</p></li><li><p>使用 Lock 锁可以知道是否成功获得锁</p></li><li><p>Lock 锁的效率更高</p></li></ul><p><code>公平锁</code>：先到先做，<code>非公平锁</code>：同时去竞争，可重入锁：递归时不会死锁</p></li><li><p>ThreadLocal：在每个线程中存储一个变量的副本，这样每个线程对该变量的操作，使用的是该线程的局部变量，不会对其他线程有任何影响</p></li><li><p>Volatile：</p><ul><li>可见性：所以线程都能看到该变量的最新状态，每次读取必须从主内存中得到最新的值，每次写入必须立即同步回主内存</li><li>有序性：JVM 编译程序时会对语句重排序，而一个变量被声明为 Volatile,则该变量不会进行重排序</li><li>Volatile 只能保证原子性的操作时线程安全的</li><li>适用场景：运算结果不依赖变量的当前值、确保只有单一的线程修改变量的值</li></ul></li></ul><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><p>两个线程互相等待对方释放锁，没有异常，没有提示，都进入阻塞</p><p>银行家算法</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合</title>
      <link href="2021/03/14/ji-he/"/>
      <url>2021/03/14/ji-he/</url>
      
        <content type="html"><![CDATA[<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>Collection 接口：<br><code>List</code>接口：有序、可重复，实现类有 Vector、ArrayList、LinkedList<br><code>Set</code>接口：无序、不可重复，实现类有 HashSet、LinkHashSet、TreeSet<br><code>Queue</code>接口：队列，实现类为 LinkedList</p><p>Map 接口：实现类有 HashMap、HashTable、LinkedHashMap、ConcurrentHashMap、TreeMap</p><p>其中 ArrayList 和 Vector 使用了数组实现，Vector 是线程安全的，ArrayList 线程不安全，LinkedList 使用了双向循环链表实现</p><p><strong>重写 hashCode()和 equals()</strong></p><ul><li>为什么要重写？<ol><li>HashSet 存放元素时，先根据元素 hashCode 值快速找到要存储的位置，若该位置有元素，两个对象通过 equals()进行比较，返回 true 则不放入，若为 false 则会以链表的形式在同一个位置存放两个元素，这样会使 HashSet 性能降低，因为不能快速定位了</li><li>若 hashCode 值不同，但 equlas()返回 true，会导致 HashSet 存入两个相同的对象，无法保证唯一性</li></ol></li><li>重写时要注意什么：最好让 hashCode 值不重复，使 Hash 表分布均匀，便于快速定位</li></ul><p>Map 的存储结构：Hash 表+链表+红黑树</p><p>HashMap、HashTable、ConcurrentHashMap</p><ul><li>HashMap 线程不安全，允许 key/value 为空</li><li>HashTable 线程安全，不允许 key/value 为空，效率较低</li><li>ConcurrentHashMap 线程安全，效率很高</li></ul><p>LinkHashSet、LinkedHashMap 内部增加了一个链表，用于存放元素的顺序，使迭代出来的顺序和存入顺序一致</p><p>TreeSet、TreeMap 基于红黑树实现</p><p>HashSet 基于 HashMap 实现</p><p>对于重复元素，HashSet 不存，HashMap 覆盖</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
